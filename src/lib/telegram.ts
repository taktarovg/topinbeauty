// src/lib/telegram.ts
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { TelegramBotError } from '@/types/errors';
import type { BookingWithRelations } from '@/types/booking';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const BOT_USERNAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_USERNAME;

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is not defined');
}

export async function sendTelegramMessage(chatId: string, text: string) {
  if (!BOT_TOKEN) return;

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new TelegramBotError(`Failed to send message: ${error.description}`, response.status);
    }

    return await response.json();
  } catch (error) {
    console.error('Telegram bot error:', error);
  }
}

export async function sendBookingNotification(booking: BookingWithRelations, masterChatId: string, clientChatId: string) {
  if (!masterChatId || !clientChatId) {
    console.log('Missing telegram IDs for notification');
    return;
  }

  const bookingDate = format(new Date(booking.bookingDateTime), 'dd MMMM yyyy –≤ HH:mm', { locale: ru });

  const masterMessage = `
üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!

–ö–ª–∏–µ–Ω—Ç: ${booking.user.firstName} ${booking.user.lastName || ''}
–£—Å–ª—É–≥–∞: ${booking.service.name}
–î–∞—Ç–∞: ${bookingDate}
–°—Ç–∞—Ç—É—Å: ${getBookingStatusText(booking.status)}

${booking.notes ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.notes}` : ''}
`;

  const clientMessage = `
‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!

–ú–∞—Å—Ç–µ—Ä: ${booking.service.master.user.firstName} ${booking.service.master.user.lastName}
–£—Å–ª—É–≥–∞: ${booking.service.name}
–î–∞—Ç–∞: ${bookingDate}
–°—Ç–∞—Ç—É—Å: ${getBookingStatusText(booking.status)}

${booking.status === 'PENDING' ? '\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–∞—Å—Ç–µ—Ä–∞.' : ''}
`;

  try {
    await Promise.allSettled([
      sendTelegramMessage(masterChatId, masterMessage),
      sendTelegramMessage(clientChatId, clientMessage),
    ]);
  } catch (error) {
    console.error('Failed to send booking notifications:', error);
  }
}

export async function sendBookingStatusNotification(booking: BookingWithRelations) {
  if (!booking.user.telegramId) {
    console.log('Missing client telegram ID for status notification');
    return;
  }

  const bookingDate = format(new Date(booking.bookingDateTime), 'dd MMMM yyyy –≤ HH:mm', { locale: ru });

  const clientMessage = `
üìù –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω!

–ú–∞—Å—Ç–µ—Ä: ${booking.service.master.user.firstName} ${booking.service.master.user.lastName}
–£—Å–ª—É–≥–∞: ${booking.service.name}
–î–∞—Ç–∞: ${bookingDate}
–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${getBookingStatusText(booking.status)}
`;

  try {
    await sendTelegramMessage(booking.user.telegramId, clientMessage);
  } catch (error) {
    console.error('Failed to send status notification:', error);
  }
}

export async function sendBookingReminder(booking: BookingWithRelations) {
  try {
    const bookingDate = format(new Date(booking.bookingDateTime), 'dd MMMM yyyy –≤ HH:mm', { locale: ru });

    if (booking.user.telegramId) {
      const clientMessage = `
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!

–ú–∞—Å—Ç–µ—Ä: ${booking.service.master.user.firstName} ${booking.service.master.user.lastName}
–£—Å–ª—É–≥–∞: ${booking.service.name}
–î–∞—Ç–∞: ${bookingDate}
`;
      await sendTelegramMessage(booking.user.telegramId, clientMessage);
    }

    if (booking.service.master.user.telegramId) {
      const masterMessage = `
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–ª–∏–µ–Ω—Ç–µ!

–ö–ª–∏–µ–Ω—Ç: ${booking.user.firstName} ${booking.user.lastName}
–£—Å–ª—É–≥–∞: ${booking.service.name}
–î–∞—Ç–∞: ${bookingDate}
`;
      await sendTelegramMessage(booking.service.master.user.telegramId, masterMessage);
    }
  } catch (error) {
    console.error('Failed to send reminder notifications:', error);
  }
}

function getBookingStatusText(status: string): string {
  const statusTexts: Record<string, string> = {
    PENDING: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    CONFIRMED: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
    CANCELED: '–û—Ç–º–µ–Ω–µ–Ω–∞',
    COMPLETED: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
  };
  return statusTexts[status] || status;
}